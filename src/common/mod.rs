use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use uuid::Uuid;
#[cfg(feature = "ssr")]
use {
    crate::backend::database::schema::{article, edit, local_user, person},
    activitypub_federation::fetch::object_id::ObjectId,
    diesel::{Identifiable, Queryable, Selectable},
};

/// Should be an enum Title/Id but fails due to https://github.com/nox/serde_urlencoded/issues/66
#[derive(Deserialize, Serialize, Clone)]
pub struct GetArticleData {
    pub title: Option<String>,
    pub instance_id: Option<i32>,
    pub id: Option<i32>,
}

#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]
#[cfg_attr(feature = "ssr", derive(Queryable))]
#[cfg_attr(feature = "ssr", diesel(table_name = article, check_for_backend(diesel::pg::Pg)))]
pub struct ArticleView {
    pub article: DbArticle,
    pub latest_version: EditVersion,
    pub edits: Vec<DbEdit>,
}

#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]
#[cfg_attr(feature = "ssr", derive(Queryable, Selectable, Identifiable))]
#[cfg_attr(feature = "ssr", diesel(table_name = article, check_for_backend(diesel::pg::Pg), belongs_to(DbInstance, foreign_key = instance_id)))]
pub struct DbArticle {
    pub id: i32,
    pub title: String,
    pub text: String,
    #[cfg(feature = "ssr")]
    pub ap_id: ObjectId<DbArticle>,
    #[cfg(not(feature = "ssr"))]
    pub ap_id: String,
    pub instance_id: i32,
    pub local: bool,
}

/// Represents a single change to the article.
#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]
#[cfg_attr(feature = "ssr", derive(Queryable, Selectable))]
#[cfg_attr(feature = "ssr", diesel(table_name = edit, check_for_backend(diesel::pg::Pg)))]
pub struct DbEdit {
    // TODO: we could use hash as primary key, but that gives errors on forking because
    //       the same edit is used for multiple articles
    pub id: i32,
    pub creator_id: i32,
    /// UUID built from sha224 hash of diff
    pub hash: EditVersion,
    #[cfg(feature = "ssr")]
    pub ap_id: ObjectId<DbEdit>,
    #[cfg(not(feature = "ssr"))]
    pub ap_id: String,
    pub diff: String,
    pub article_id: i32,
    /// First edit of an article always has `EditVersion::default()` here
    pub previous_version_id: EditVersion,
}

/// The version hash of a specific edit. Generated by taking an SHA256 hash of the diff
/// and using the first 16 bytes so that it fits into UUID.
#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, Eq, Hash)]
#[cfg_attr(feature = "ssr", derive(diesel_derive_newtype::DieselNewType))]
pub struct EditVersion(pub(crate) Uuid);

#[derive(Deserialize, Serialize, Clone)]
pub struct RegisterUserData {
    pub username: String,
    pub password: String,
}

#[derive(Deserialize, Serialize)]
pub struct LoginUserData {
    pub username: String,
    pub password: String,
}

#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]
#[cfg_attr(feature = "ssr", derive(Queryable))]
#[cfg_attr(feature = "ssr", diesel(check_for_backend(diesel::pg::Pg)))]
pub struct LocalUserView {
    pub person: DbPerson,
    pub local_user: DbLocalUser,
}

/// A user with account registered on local instance.
#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]
#[cfg_attr(feature = "ssr", derive(Queryable, Selectable, Identifiable))]
#[cfg_attr(feature = "ssr", diesel(table_name = local_user, check_for_backend(diesel::pg::Pg)))]
pub struct DbLocalUser {
    pub id: i32,
    pub password_encrypted: String,
    pub person_id: i32,
}

/// Federation related data from a local or remote user.
#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]
#[cfg_attr(feature = "ssr", derive(Queryable, Selectable, Identifiable))]
#[cfg_attr(feature = "ssr", diesel(table_name = person, check_for_backend(diesel::pg::Pg)))]
pub struct DbPerson {
    pub id: i32,
    pub username: String,
    #[cfg(feature = "ssr")]
    pub ap_id: ObjectId<DbPerson>,
    #[cfg(not(feature = "ssr"))]
    pub ap_id: String,
    pub inbox_url: String,
    #[serde(skip)]
    pub public_key: String,
    #[serde(skip)]
    pub private_key: Option<String>,
    #[serde(skip)]
    pub last_refreshed_at: DateTime<Utc>,
    pub local: bool,
}
